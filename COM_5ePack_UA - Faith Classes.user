<?xml version="1.0" encoding="UTF-8"?>
<document signature="Hero Lab Data">
  <thing id="c5CWlkSeek" name="The Seeker" description="Your search for knowledge led you to firm a pact with a likeminded entity from the astral plane.\n\nSource: https://dnd.wizards.com/articles/features/faithful" compset="CustomSpec" uniqueness="unique">
    <comment>Source: https://dnd.wizards.com/articles/features/faithful</comment>
    <usesource source="5eFaitUACP"/>
    <tag group="ClsAllowSp" tag="spArcaEye" name="Arcane Eye" abbrev="Arcane Eye"/>
    <tag group="ClsAllowSp" tag="spLegeLore" name="Legend Lore" abbrev="Legend Lore"/>
    <tag group="ClsAllowSp" tag="spFeatFall" name="Feather Fall" abbrev="Feather Fall"/>
    <tag group="ClsAllowSp" tag="spLocaCrea" name="Locate Creature" abbrev="Locate Creature"/>
    <tag group="ClsAllowSp" tag="spSending" name="Sending" abbrev="Sending"/>
    <tag group="ClsAllowSp" tag="spPasswall" name="Passwall" abbrev="Passwall"/>
    <tag group="ClsAllowSp" tag="spJump" name="Jump" abbrev="Jump"/>
    <tag group="ClsAllowSp" tag="spLocaObje" name="Locate Object" abbrev="Locate Object"/>
    <tag group="Helper" tag="Primary" name="Primary" abbrev="Primary"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <tag group="SpecSource" tag="cHelpWlk" name="Warlock" abbrev="Warlock"/>
    <tag group="abCategory" tag="WlkOthPatr" name="Warlock Otherworldly Patron" abbrev="Warlock Otherworldly Patron"/>
    <tag group="ClsAllowSp" tag="spLevitate" name="Levitate" abbrev="Levitate"/>
    <tag group="ClsAllowSp" tag="spClairvoy" name="Clairvoyance" abbrev="Clairvoyance"/>
    <bootstrap thing="c5CWlkFarW">
      <autotag group="ClSpecWhen" tag="10"/>
      </bootstrap>
    <bootstrap thing="c5CWlkAstS">
      <autotag group="ClSpecWhen" tag="14"/>
      </bootstrap>
    <bootstrap thing="c5CWlkShiA">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <bootstrap thing="c5CWlkAstR">
      <autotag group="ClSpecWhen" tag="6"/>
      </bootstrap>
    <eval phase="PostLevel" priority="10000">doneif (islinkage[table] = 0)

      perform linkage[table].pushtags[ClsAllowSp.?]</eval>
    </thing>
  <thing id="c5CWlkShiA" name="Shielding Aurora" description="Starting at 1st level, you can invoke the Seeker’s power to protect you from harm. As a bonus action, you create a whirling aurora of brilliant energy that swirls around you. Until the end of your next turn, you gain resistance to all damage, and if a hostile creature ends its turn within 10 feet of you, it takes radiant damage equal to your warlock level + your Charisma modifier.\n\nOnce you use this feature, you can’t use it again until you finish a short or long rest." compset="ClSpecial">
    <fieldval field="abDuration" value="1"/>
    <fieldval field="abRange" value="10"/>
    <fieldval field="trkMax" value="1"/>
    <tag group="abRange" tag="Feet" name="Feet" abbrev="ft."/>
    <tag group="Usage" tag="ShortRest" name="/short rest" abbrev="/short rest"/>
    <tag group="User" tag="Tracker" name="Tracker" abbrev="Tracker"/>
    <tag group="abDuration" tag="Round" name="Round" abbrev="rd"/>
    <tag group="abAction" tag="Bonus"/>
    </thing>
  <thing id="c5CWlkAstR" name="Astral Refuge" description="You gain the ability to step into an astral refuge. As an Action, you disapear from the world for a brief moment and enter the Astral Plane, taking advantage of its timeless nature. While in your astral refuge, you can take two actions to cast spells that target only you. After using those two actions, you retur to the space you occupied and your turn ends." compset="ClSpecial">
    <fieldval field="trkMax" value="1"/>
    <tag group="User" tag="Tracker" name="Tracker" abbrev="Tracker"/>
    <tag group="abDuration" tag="Instant"/>
    <tag group="abRange" tag="Personal"/>
    <tag group="Usage" tag="ShortRest" name="/short rest" abbrev="/short rest"/>
    <tag group="abAction" tag="Action"/>
    </thing>
  <thing id="c5CWlkFarW" name="Far Wanderer" description="You no longer need to breathe, and you gain resistance to fire damage and cold damage." compset="ClSpecial">
    <tag group="abDuration" tag="Constant"/>
    <tag group="abRange" tag="Personal"/>
    <eval phase="PostLevel" priority="10000"><![CDATA[
      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] = 0)

      ~ If we're disabled, do nothing
      doneif (tagis[Helper.Disable] <> 0)

      perform forward[DamageRes.dtFire]
      perform forward[DamageRes.dtCold]]]></eval>
    </thing>
  <thing id="c5CWlkAstS" name="Astral Sequestration" description="You gain the ability to sequester yourself and your allies in the Astral Plane. \n\nBy performing a special ritual over the course of 5 minutes, you shif yourself and up to ten willing creatures you can see to the Astral Plane. You and those creatures gain the benefits of a short rest while sequestered on the Astral Plane. You then return to the spaces you all occupied when you use this ability, with no time having passed in the world.\n\nDuring this short rest, you and the creatures you sequester can make use of any options available during a rest that affect only you and the creatures you sequester.\n\nOnce you use this ability, you cannot use it again until you complete a long rest." compset="ClSpecial" summary="You gain the ability to sequester yourself and your allies in the Astral Plane.">
    <fieldval field="abDuration" value="5"/>
    <fieldval field="trkMax" value="1"/>
    <tag group="abAction" tag="Action" name="Action" abbrev="Act"/>
    <tag group="abDuration" tag="Minute" name="Minute" abbrev="min"/>
    <tag group="abRange" tag="Sight"/>
    <tag group="Usage" tag="LongRest"/>
    <tag group="User" tag="Tracker" name="Tracker" abbrev="Tracker"/>
    </thing>
  <thing id="c5CWlkStar" name="Pact of the Star Chain" description="The Seeker grants you a chain forged from starlight, decorated with gleaming motes of brightness. While the chain is on your person, you know the {i}augury{/i} spell and you can cast it as a ritual. The spell does not count against your number of spells known.\n\nAdditionally, you can invoke the Seeker&apos;s power to gain advantage on an intelligence check while you carry this item. Once you use this feature, you cannot use it again until you complete a short or long rest.\n\nIf you lose your Star Chain, you can perform a 1- hour ceremony to receive a replacement from the Seeker. The ceremony can be performed during a short or long rest, and it destroys the previous chain. The chain disapears in a flash of light when you die.\n\nSource: https://dnd.wizards.com/articles/features/faithful" compset="CustomSpec" summary="Gain the ability to cast {i}augury{/i}." uniqueness="unique">
    <comment>Source: https://dnd.wizards.com/articles/features/faithful</comment>
    <fieldval field="trkMax" value="1"/>
    <usesource source="5eFaitUACP" parent="UserParent" name="5e Unearthed Arcana - The Faithful"/>
    <tag group="abAction" tag="None" name="No action" abbrev="None"/>
    <tag group="abCategory" tag="WlkPacBoon" name="Warlock Pact Boon" abbrev="Warlock Pact Boon"/>
    <tag group="abDuration" tag="Constant" name="Constant" abbrev="cons"/>
    <tag group="abRange" tag="Personal" name="Personal" abbrev="pers"/>
    <tag group="User" tag="Tracker"/>
    <tag group="Helper" tag="Secondary" name="Secondary" abbrev="Secondary"/>
    <tag group="Usage" tag="ShortRest"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <tag group="SpecSource" tag="cHelpWlk" name="Warlock" abbrev="Warlock"/>
    <bootstrap thing="spAugury">
      <autotag group="BonusSplAt" tag="3"/>
      <autotag group="Helper" tag="Free"/>
      <autotag group="Helper" tag="Known"/>
      <autotag group="SpellType" tag="cHelpWlk"/>
      </bootstrap>
    <pickreq thing="c5CWlkSeek"/>
    </thing>
  <thing id="c5CWizTheu" name="Theurgy" description="A number of deities claim arcane magic as their domain. While the idea of a divine being embracing such power might seem contradictory, magic is as much a part of the fabric of the cosmos as wind, fire, lightning, and all other primal forces. Just as there are deities of the sea and gods of warfare, the arcane arts feature their own divine patrons.\nSuch deities often have clerics, but many gods of magic bid their followers to take up the study of wizardry. These religious magic-users follow the arcane tradition of Theurgy, and are commonly known as theurgists. Such spellcasters are as dedicated and scholarly as any other wizard, but they blend their arcane study with religious teachings." compset="CustomSpec" uniqueness="unique">
    <usesource source="5eFaitUACP"/>
    <tag group="Helper" tag="Primary"/>
    <tag group="SpecSource" tag="cHelpWiz"/>
    <bootstrap thing="c5CWizDins">
      <autotag group="ClSpecWhen" tag="2"/>
      </bootstrap>
    <bootstrap thing="c5CWizAini">
      <autotag group="ClSpecWhen" tag="2"/>
      </bootstrap>
    <bootstrap thing="c5CWizChAr">
      <autotag group="ClSpecWhen" tag="2"/>
      </bootstrap>
    <bootstrap thing="c5CWizChDA">
      <autotag group="ClSpecWhen" tag="2"/>
      </bootstrap>
    <bootstrap thing="c5CClrKnoA">
      <containerreq phase="First" priority="499">fieldval:abValue = 0</containerreq>
      <autotag group="ClSpecWhen" tag="2"/>
      </bootstrap>
    <bootstrap thing="cClrPreLif">
      <containerreq phase="First" priority="499">fieldval:abValue = 1</containerreq>
      <autotag group="ClSpecWhen" tag="2"/>
      </bootstrap>
    <bootstrap thing="c5CClrRadD">
      <containerreq phase="First" priority="499">fieldval:abValue = 2</containerreq>
      <autotag group="ClSpecWhen" tag="2"/>
      <autotag group="StandardDC" tag="aINT"/>
      </bootstrap>
    <bootstrap thing="c5CClrChAP">
      <containerreq phase="First" priority="499">fieldval:abValue = 3</containerreq>
      <autotag group="ClSpecWhen" tag="2"/>
      </bootstrap>
    <bootstrap thing="c5CClrDesW">
      <containerreq phase="First" priority="499">fieldval:abValue = 4</containerreq>
      <autotag group="ClSpecWhen" tag="2"/>
      </bootstrap>
    <bootstrap thing="c5CClrInvD">
      <containerreq phase="First" priority="499">fieldval:abValue = 5</containerreq>
      <autotag group="ClSpecWhen" tag="2"/>
      </bootstrap>
    <bootstrap thing="c5CClrGuiS">
      <containerreq phase="First" priority="499">fieldval:abValue = 6</containerreq>
      <autotag group="ClSpecWhen" tag="2"/>
      </bootstrap>
    <bootstrap thing="c5CClrTouD">
      <containerreq phase="First" priority="499">fieldval:abValue = 7</containerreq>
      <autotag group="ClSpecWhen" tag="2"/>
      </bootstrap>
    <bootstrap thing="c5CClrArAb">
      <containerreq phase="First" priority="499">fieldval:abValue = 8</containerreq>
      <autotag group="ClSpecWhen" tag="2"/>
      </bootstrap>
    <bootstrap thing="c5CWizArAc">
      <autotag group="ClSpecWhen" tag="6"/>
      </bootstrap>
    <bootstrap thing="c5CWizArPr">
      <autotag group="ClSpecWhen" tag="10"/>
      </bootstrap>
    <bootstrap thing="c5CWizArHP">
      <autotag group="ClSpecWhen" tag="14"/>
      </bootstrap>
    <bootstrap thing="c5CClrBleK">
      <containerreq phase="First" priority="499">fieldval:abValue = 0</containerreq>
      <autotag group="ClSpecWhen" tag="6"/>
      </bootstrap>
    <bootstrap thing="cClrDisLif">
      <containerreq phase="First" priority="499">fieldval:abValue = 1</containerreq>
      <autotag group="ClSpecWhen" tag="6"/>
      </bootstrap>
    <bootstrap thing="c5CClrWarF">
      <containerreq phase="First" priority="499">fieldval:abValue = 2</containerreq>
      <autotag group="ClSpecWhen" tag="6"/>
      <autotag group="ChargeAttr" tag="aINT"/>
      </bootstrap>
    <bootstrap thing="c5CWizTAcN">
      <containerreq phase="First" priority="499">fieldval:abValue = 3</containerreq>
      <autotag group="ClSpecWhen" tag="6"/>
      </bootstrap>
    <bootstrap thing="c5CClrWraS">
      <containerreq phase="First" priority="499">fieldval:abValue = 4</containerreq>
      <autotag group="ClSpecWhen" tag="6"/>
      <autotag group="ChargeAttr" tag="aINT"/>
      <autotag group="StandardDC" tag="aINT"/>
      </bootstrap>
    <bootstrap thing="c5CClrBleT">
      <containerreq phase="First" priority="499">fieldval:abValue = 5</containerreq>
      <autotag group="ClSpecWhen" tag="6"/>
      </bootstrap>
    <bootstrap thing="c5CClrWarP">
      <containerreq phase="First" priority="499">fieldval:abValue = 6</containerreq>
      <autotag group="ClSpecWhen" tag="6"/>
      <autotag group="ChargeAttr" tag="aINT"/>
      </bootstrap>
    <bootstrap thing="c5CClrReap">
      <containerreq phase="First" priority="499">fieldval:abValue = 7</containerreq>
      <autotag group="ClSpecWhen" tag="6"/>
      </bootstrap>
    <bootstrap thing="c5CWizTAIn">
      <containerreq phase="First" priority="499">fieldval:abValue = 8</containerreq>
      <autotag group="ClSpecWhen" tag="6"/>
      </bootstrap>
    <bootstrap thing="c5CClrBonC">
      <containerreq phase="First" priority="499">fieldval:abValue = 2</containerreq>
      <autotag group="ClSpecWhen" tag="6"/>
      </bootstrap>
    <bootstrap thing="c5CClrReaT">
      <containerreq phase="First" priority="499">fieldval:abValue = 0</containerreq>
      <autotag group="ClSpecWhen" tag="10"/>
      <autotag group="StandardDC" tag="aINT"/>
      </bootstrap>
    <bootstrap thing="c5CClrVisP">
      <containerreq phase="First" priority="499">fieldval:abValue = 0</containerreq>
      <autotag group="ClSpecWhen" tag="14"/>
      </bootstrap>
    <bootstrap thing="cClrBleHea">
      <containerreq phase="First" priority="499">fieldval:abValue = 1</containerreq>
      <autotag group="ClSpecWhen" tag="10"/>
      </bootstrap>
    <bootstrap thing="cClrSupHea">
      <containerreq phase="First" priority="499">fieldval:abValue = 1</containerreq>
      <autotag group="ClSpecWhen" tag="14"/>
      </bootstrap>
    <bootstrap thing="c5CClrImpF">
      <containerreq phase="First" priority="499">fieldval:abValue = 2</containerreq>
      <autotag group="ClSpecWhen" tag="10"/>
      </bootstrap>
    <bootstrap thing="c5CClrCorL">
      <containerreq phase="First" priority="499">fieldval:abValue = 2</containerreq>
      <autotag group="ClSpecWhen" tag="14"/>
      </bootstrap>
    <bootstrap thing="c5CClrDamE">
      <containerreq phase="First" priority="499">fieldval:abValue = 3</containerreq>
      <autotag group="ClSpecWhen" tag="10"/>
      </bootstrap>
    <bootstrap thing="c5CClrMasN">
      <containerreq phase="First" priority="499">fieldval:abValue = 3</containerreq>
      <autotag group="ClSpecWhen" tag="14"/>
      </bootstrap>
    <bootstrap thing="c5CClrThuS">
      <containerreq phase="First" priority="499">fieldval:abValue = 4</containerreq>
      <autotag group="ClSpecWhen" tag="10"/>
      </bootstrap>
    <bootstrap thing="c5CClrStor">
      <containerreq phase="First" priority="499">fieldval:abValue = 4</containerreq>
      <autotag group="ClSpecWhen" tag="14"/>
      </bootstrap>
    <bootstrap thing="c5CClrCloS">
      <containerreq phase="First" priority="499">fieldval:abValue = 5</containerreq>
      <autotag group="ClSpecWhen" tag="10"/>
      </bootstrap>
    <bootstrap thing="c5CClrImpD">
      <containerreq phase="First" priority="499">fieldval:abValue = 5</containerreq>
      <autotag group="ClSpecWhen" tag="14"/>
      </bootstrap>
    <bootstrap thing="c5CClrWaGB">
      <containerreq phase="First" priority="499">fieldval:abValue = 6</containerreq>
      <autotag group="ClSpecWhen" tag="10"/>
      </bootstrap>
    <bootstrap thing="c5CClrAvaB">
      <containerreq phase="First" priority="499">fieldval:abValue = 6</containerreq>
      <autotag group="ClSpecWhen" tag="14"/>
      </bootstrap>
    <bootstrap thing="c5CClrIneD">
      <containerreq phase="First" priority="499">fieldval:abValue = 7</containerreq>
      <autotag group="ClSpecWhen" tag="10"/>
      </bootstrap>
    <bootstrap thing="c5CClrImpR">
      <containerreq phase="First" priority="499">fieldval:abValue = 7</containerreq>
      <autotag group="ClSpecWhen" tag="14"/>
      </bootstrap>
    <bootstrap thing="c5CClrSpBr">
      <containerreq phase="First" priority="499">fieldval:abValue = 8</containerreq>
      <autotag group="ClSpecWhen" tag="10"/>
      </bootstrap>
    <bootstrap thing="c5CWizTArM">
      <containerreq phase="First" priority="499">fieldval:abValue = 8</containerreq>
      <autotag group="ClSpecWhen" tag="14"/>
      </bootstrap>
    <eval phase="First" priority="455"><![CDATA[~we need to know what domain we have, in order to bootstrap the correct channel divinity
field[abValue].value = hero.childfound[c5CWizDins].field[usrIndex].value

~oddly enough, the value will be shifted +1 when stored on abValue, at least when printed by debug. But when testing it on bootstrap conditions, you need to refer to the original usrIndex value.

~ debug tagexpr[fieldval:abValue > 2]]]></eval>
    </thing>
  <thing id="c5CWizDins" name="Divine Inspiration" description="When you select this tradition at 2nd level, pick a divine domain from your chosen deity’s list of eligible domains.\n\nEDITOR NOTE: This selection will make some domain spells available for you (see Arcane Initiate). if you change the domain here, the domain spells already on your spell book WILL NOT be removed. You need to remove them manually." compset="ClSpecial">
    <arrayval field="usrArray" index="0" value="Knowledge"/>
    <arrayval field="usrArray" index="1" value="Life"/>
    <arrayval field="usrArray" index="2" value="Light"/>
    <arrayval field="usrArray" index="3" value="Nature"/>
    <arrayval field="usrArray" index="4" value="Tempest"/>
    <arrayval field="usrArray" index="5" value="Trickery"/>
    <arrayval field="usrArray" index="6" value="War"/>
    <arrayval field="usrArray" index="7" value="Death"/>
    <arrayval field="usrArray" index="8" value="Arcana"/>
    </thing>
  <thing id="c5CWizAini" name="Arcane Initiate" description="Beginning when you select this tradition at 2nd level, whenever you gain a wizard level, you can choose to replace one of the wizard spells you add to your spellbook with a cleric domain spell for your chosen domain. The spell must be of a level for which you have spell slots.\nIf you add all of your domain spells to your spellbook, you can subsequently opt to add any spell from the cleric spell list instead. The spell must still be of a level for which you have spell slots. \nOther wizards cannot copy cleric spells from your spellbook into their own spellbooks." compset="ClSpecial">
    <eval phase="Final" priority="21000"><![CDATA[doneif (tagis[Helper.ShowSpec] = 0)
doneif (tagis[Helper.Disable] <> 0)

var dompick as number
var spelltag as string
~ we need to add our domain spells. First, we need to know which
~ domain we have selected.

dompick = hero.childfound[c5CWizDins].field[usrIndex].value

~ Now, based on the domain, we need to adjust the spell selection tags for the class wizard, so they include the domain spells at their proper levels. 

~ 0 = Knowledge
if ( dompick = 0 ) then
   spelltag &= " DescInfo.spCommand | DescInfo.spIdentify "
   if (#levelcount[Wizard] >= 3) then
       spelltag &= " | DescInfo.spAugury | DescInfo.spSuggesti "
       if (#levelcount[Wizard] >= 5) then
          spelltag &= " | DescInfo.spNondetec | DescInfo.spSpeaDead "
          if (#levelcount[Wizard] >= 7) then
             spelltag &= " | DescInfo.spArcaEye | DescInfo.spConfusio "
             if (#levelcount[Wizard] >= 9) then
                spelltag &= " | DescInfo.spLegeLore | DescInfo.spScrying "
             endif
          endif
       endif
   endif
~ 1 = Life
elseif ( dompick = 1 ) then
   spelltag &= " DescInfo.spBless | DescInfo.spCureWoun "
   if (#levelcount[Wizard] >= 3) then
       spelltag &= " | DescInfo.spLessRest | DescInfo.spSpirWeap "
       if (#levelcount[Wizard] >= 5) then
          spelltag &= " | DescInfo.spBeacHope | DescInfo.spRevivify "
          if (#levelcount[Wizard] >= 7) then
             spelltag &= " | DescInfo.spDeatWard | DescInfo.spGuarFait "
             if (#levelcount[Wizard] >= 9) then
                spelltag &= " | DescInfo.spMassCure | DescInfo.spRaisDead "
             endif
          endif
       endif
   endif
~ 2 = Light
elseif ( dompick = 2 ) then
   spelltag &= " DescInfo.spBurnHand | DescInfo.spFaerFire "
   if (#levelcount[Wizard] >= 3) then
       spelltag &= " | DescInfo.spFlamSphe | DescInfo.spScorRay "
       if (#levelcount[Wizard] >= 5) then
          spelltag &= " | DescInfo.spDaylight | DescInfo.spFireball "
          if (#levelcount[Wizard] >= 7) then
             spelltag &= " | DescInfo.spGuarFait | DescInfo.spWallFire "
             if (#levelcount[Wizard] >= 9) then
                spelltag &= " | DescInfo.spFlamStri | DescInfo.spScrying "
             endif
          endif
       endif
   endif
~ 3 = Nature
elseif ( dompick = 3 ) then
   spelltag &= " DescInfo.spAnimFrie  | DescInfo.spSpeaAnim "
   if (#levelcount[Wizard] >= 3) then
       spelltag &= " | DescInfo.spBarkskin | DescInfo.spSpikGrow "
       if (#levelcount[Wizard] >= 5) then
          spelltag &= " | DescInfo.spPlanGrow | DescInfo.spWindWall "
          if (#levelcount[Wizard] >= 7) then
             spelltag &= " | DescInfo.spDomiBeas | DescInfo.sp5CGraspV "
             if (#levelcount[Wizard] >= 9) then
                spelltag &= " | DescInfo.spInsePlag | DescInfo.spTreeStri "
             endif
          endif
       endif
   endif
~ 4 = Tempest
elseif ( dompick = 4 ) then
   spelltag &= " DescInfo.spFogClou | DescInfo.spThunderw "
   if (#levelcount[Wizard] >= 3) then
       spelltag &= " | DescInfo.spGustWind | DescInfo.spShatter "
       if (#levelcount[Wizard] >= 5) then
          spelltag &= " | DescInfo.spCallLigh | DescInfo.spSleeStor "
          if (#levelcount[Wizard] >= 7) then
             spelltag &= " | DescInfo.spContWate | DescInfo.spIceStor "
             if (#levelcount[Wizard] >= 9) then
                spelltag &= " | DescInfo.sp5CDestrS | DescInfo.spInsePlag "
             endif
          endif
       endif
   endif
~ 5 = Trickery
elseif ( dompick = 5 ) then
   spelltag &= " DescInfo.spCharPers | DescInfo.spDisgSelf "
   if (#levelcount[Wizard] >= 3) then
       spelltag &= " | DescInfo.spMirrImag | DescInfo.spPassTrac "
       if (#levelcount[Wizard] >= 5) then
          spelltag &= " | DescInfo.spBlink | DescInfo.spDispMagi "
          if (#levelcount[Wizard] >= 7) then
             spelltag &= " | DescInfo.spDimeDoor | DescInfo.spPolymorp "
             if (#levelcount[Wizard] >= 9) then
                spelltag &= " | DescInfo.spDomiPers | DescInfo.spModiMemo "
             endif
          endif
       endif
   endif
~ 6 = War
elseif ( dompick = 6 ) then
   spelltag &= " DescInfo.spDiviFavo | DescInfo.spShieFait "
   if (#levelcount[Wizard] >= 3) then
       spelltag &= " | DescInfo.spMagiWeap | DescInfo.spSpirWeap "
       if (#levelcount[Wizard] >= 5) then
          spelltag &= " | DescInfo.sp5CCrusMa | DescInfo.spSpirGuar "
          if (#levelcount[Wizard] >= 7) then
             spelltag &= " | DescInfo.spFreeMove | DescInfo.spStoneski "
             if (#levelcount[Wizard] >= 9) then
                spelltag &= " | DescInfo.spFlamStri | DescInfo.spHoldMons "
             endif
          endif
       endif
   endif
~ 7 = Death
elseif ( dompick = 7 ) then
   spelltag &= " DescInfo.spFalsLife | DescInfo.sp5CRaySi "
   if (#levelcount[Wizard] >= 3) then
       spelltag &= " | DescInfo.spBlinDeaf | DescInfo.spRayEnfe "
       if (#levelcount[Wizard] >= 5) then
          spelltag &= " | DescInfo.spAnimDead | DescInfo.spVampTouc "
          if (#levelcount[Wizard] >= 7) then
             spelltag &= " | DescInfo.spBlight | DescInfo.spDeatWard "
             if (#levelcount[Wizard] >= 9) then
                spelltag &= " | DescInfo.spAntiShel | DescInfo.spCloudkil "
             endif
          endif
       endif
   endif
~ 8 = Arcana
elseif ( dompick = 8 ) then
   spelltag &= " DescInfo.spDeteMagi | DescInfo.spMagiMiss "
   if (#levelcount[Wizard] >= 3) then
       spelltag &= " | DescInfo.spMagiWeap | DescInfo.sp5CNyMaAu "
       if (#levelcount[Wizard] >= 5) then
          spelltag &= " | DescInfo.spDispMagi | DescInfo.spMagiCirc "
          if (#levelcount[Wizard] >= 7) then
             spelltag &= " | DescInfo.spArcaEye | DescInfo.spSecrChes "
             if (#levelcount[Wizard] >= 9) then
                spelltag &= " | DescInfo.spPlanBind | DescInfo.spTeleCirc "
             endif
          endif
       endif
   endif
endif

~IF we are 11th, AND have all of the domain spells on the spellbook, we allow any cleric spell to be picked.
var spelltot as number
if (#levelcount[Wizard] >= 11) then
   spelltot = 0           
   ~walk through the wizards spells and check how many domain spells he has on the book.
   foreach pick in hero from BaseSpell where spelltag
           spelltot += 1
   nexteach
   ~debug "Spell total: " & spelltot
   ~ we want all(10) spells to allow other cleric spells
   if (spelltot = 10) then
      spelltag &= " | ( sClass.cHelpClr & !(sLevel.0)) "
   endif
endif

~now that spelltag has all the spells we need, load it.
~ cSplBkExpr spellbook selection
hero.childfound[cHelpWiz].field[cSplBkExpr].text &= " | " & spelltag
~ cSpMemExpr memorization selection
hero.childfound[cHelpWiz].field[cSpMemExpr].text &=  " | " & spelltag]]></eval>
    </thing>
  <thing id="c5CWizChAr" name="Channel Arcana" description="At 2nd level, you gain the ability to channel arcane energy directly from your deity, using that energy to fuel magical effects. You start with two such effects: Divine Arcana and the Channel Divinity option granted at 2nd level by your chosen domain. You employ that Channel Divinity option by using your Channel Arcana ability.\nWhen you use your Channel Arcana, you choose which effect to create. You must then finish a short or long rest to use your Channel Arcana again.\nSome Channel Arcana effects require saving throws. When you use such an effect, the save DC equals your wizard spell save DC.\nBeginning at 6th level, you can use your Channel Arcana twice between rests, and beginning at 18th level, you can use it three times between rests. When you finish a short or long rest, you regain your expended uses.\nWhen you gain further uses for Channel Divinity  from your domain, you can employ them by using  your Channel Arcana ability." compset="ClSpecial">
    <fieldval field="trkMax" value="1"/>
    <tag group="User" tag="Tracker"/>
    <tag group="Usage" tag="ShortRest"/>
    <eval phase="Render" priority="10000"><![CDATA[field[listname].text = field[thingname].text & " (" & field[trkMax].value & "/rest)"]]></eval>
    <eval phase="PostLevel" priority="10000" index="2"><![CDATA[doneif (tagis[Helper.ShowSpec] = 0)
doneif (tagis[Helper.Disable] <> 0)

if (#levelcount[Wizard] >= 6 ) then
   field[trkMax].value += 1
   if (#levelcount[Wizard] >= 18 ) then
      field[trkMax].value += 1
   endif
endif]]></eval>
    <eval phase="First" priority="500" index="3"><![CDATA[doneif (tagis[Helper.ShowSpec] = 0)
doneif (tagis[Helper.Disable] <> 0)
var dompick as string

~ We need to know which domain we have selected.

dompick = hero.childfound[c5CWizDins].field[usrIndex].value

~fix the channel divinity DCs and averything else.
~ 0 = Knowledge
if ( dompick = 0 ) then
   ~ fix read thoughts DC.
   perform hero.childfound[c5CClrReaT].delete[StandardDC.aWIS]
~ 1 = Life
elseif ( dompick = 1 ) then
~ 2 = Light
elseif ( dompick = 2 ) then
   perform hero.childfound[c5CClrRadD].delete[StandardDC.aWIS]
~ 3 = Nature
elseif ( dompick = 3 ) then
~ 4 = Tempest
elseif ( dompick = 4 ) then
~ 5 = Trickery
elseif ( dompick = 5 ) then
~ 6 = War
elseif ( dompick = 6 ) then
~ 7 = Death
elseif ( dompick = 7 ) then
~ 8 = Arcana
elseif ( dompick = 8 ) then
endif]]></eval>
    </thing>
  <thing id="c5CWizChDA" name="Channel Arcana : Divine Arcana" description="As a bonus action, you speak a prayer to control  the flow of magic around you. The next spell you  cast gains a +2 bonus to its attack roll or saving  throw DC, as appropriate." compset="ClSpecial">
    <tag group="abAction" tag="Bonus"/>
    <tag group="abRange" tag="Personal"/>
    </thing>
  <thing id="c5CWizArAc" name="Arcane Acolyte" description="At 6th level, you gain your chosen domain’s 1st-level benefits. However, you do not gain any  weapon or armor proficiencies from your domain." compset="ClSpecial">
    <eval phase="First" priority="500"><![CDATA[doneif (tagis[Helper.ShowSpec] = 0)
doneif (tagis[Helper.Disable] <> 0)
var dompick as string

~ We need to know which domain we have selected.

dompick = hero.childfound[c5CWizDins].field[usrIndex].value

~ 2 = Light
if ( dompick = 2 ) then
   perform hero.childfound[c5CClrWarF].delete[ChargeAttr.aWIS]
~ 4 = Tempest
elseif ( dompick = 4 ) then
   perform hero.childfound[c5CClrWraS].delete[ChargeAttr.aWIS]
~ 6 = War
elseif ( dompick = 6 ) then
   perform hero.childfound[c5CClrWarP].delete[ChargeAttr.aWIS]
~ 7 = Death
elseif ( dompick = 7 ) then
~ 8 = Arcana
elseif ( dompick = 8 ) then
endif]]></eval>
    </thing>
  <thing id="c5CWizArPr" name="Arcane Priest" description="At 10th level, you gain your chosen domain’s 6th-level benefits. Your faith and your understanding  of magic allow you to delve into your god’s secrets." compset="ClSpecial"></thing>
  <thing id="c5CWizArHP" name="Arcane High Priest" description="At 14th level, you gain your chosen domain’s  17th-level benefits. Your academic nature and  understanding of magic and doctrine allow you to  master this ability sooner than a cleric of your  domain." compset="ClSpecial"></thing>
  <thing id="c5CWizTAcN" name="Acolyte of Nature" description="Proficiency in one skill (Animal Handling, Nature, or Survival) and and you have access to one druid cantrip." compset="ClSpecial" summary="Skill proficiency and one druid cantrip.">
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; (Target.skAnimHand | Target.skNature | Target.skSurvival)"/>
    <fieldval field="usrCandid2" value="component.BaseSpell &amp; sClass.cHelpDrd &amp; sLevel.0"/>
    <tag group="abAction" tag="None" name="No action" abbrev="None"/>
    <tag group="abDuration" tag="Constant" name="Constant" abbrev="cons"/>
    <tag group="abRange" tag="Personal" name="Personal" abbrev="pers"/>
    <tag group="ChooseSrc1" tag="Hero" name="All Picks on Hero" abbrev="All Picks on Hero"/>
    <tag group="ChooseSrc2" tag="Thing" name="All Things" abbrev="All Things"/>
    <eval phase="PostLevel" priority="10000"><![CDATA[
      ~ If not shown get out now!
      doneif (tagis[Helper.ShowSpec] = 0)
      ~ If not disabled get out now!
      doneif (tagis[Helper.Disable] = 1)

      ~ If skill chosen pull its prof tag
      if (field[usrChosen1].ischosen <> 0) then
        perform field[usrChosen1].chosen.pulltags[ProfSkill.?]
      endif

      ~ If cantrip chosen pull the "Class Allow Spell" tag
      if (field[usrChosen2].ischosen <> 0) then
        perform field[usrChosen2].chosen.pulltags[ClsAllowSp.?]
      endif

      ~ Push prof and allow spell tags to class and hero
      perform root.linkage[table].pushtags[ClsAllowSp.?]
      perform forward[ProfSkill.?]]]>
      <before name="Assign Helper.Proficient based on ProfSkill tags on Hero"/>
      </eval>
    <evalrule phase="PostLevel" priority="10000" message="Must add chosen cantrip to cantrips known" summary="Must add chosen cantrip to cantrips known"><![CDATA[
       validif (tagis[Helper.ShowSpec] = 0)

       validif (tagis[Helper.Disable] <> 0)

       var spellname2 as string
       var searchexpr as string
       var messnames as string
       var foundone as number

       @valid = 1

       if (field[usrChosen2].ischosen <> 0) then
         foundone = 0
         searchexpr = "KnowSpell." & field[usrChosen2].chosen.idstring & " & SpellType.cHelpWiz & Helper.Cantrip"

         foreach pick in hero from BaseSpell where searchexpr
           foundone = 1

           perform eachpick.assign[Helper.Free]
         nexteach

         if (foundone = 0) then
           spellname2 = field[usrChosen2].chosen.field[name].text
           @valid = 0
         endif
       endif

       if (@valid = 0) then
         messnames = splice(messnames, spellname2, ", ")
         @message = "You have selected the following cantrips for Acolyte of Nature but not added them to your Cleric cantrips known: " & messnames
       endif]]></evalrule>
    </thing>
  <thing id="c5CWizTAIn" name="Arcane Initiate" description="You become proficient in Intelligence (Arcana), and gain two Wizard cantrips, that count as Cleric cantrips.\n\n{i}{b}Note:{/b} Once you have selected your 2 wizard cantrips, you must add them manually to your list of prepared spell.{/i}" compset="ClSpecial">
    <comment>Note: Once selected, your chosen cantrips must be manually added to you list of prepared spells.</comment>
    <fieldval field="usrCandid1" value="component.BaseSpell &amp; sLevel.0 &amp; sClass.cHelpWiz"/>
    <fieldval field="usrCandid2" value="component.BaseSpell &amp; sLevel.0 &amp; sClass.cHelpWiz"/>
    <tag group="abAction" tag="None" name="No action" abbrev="None"/>
    <tag group="abDuration" tag="Constant" name="Constant" abbrev="cons"/>
    <tag group="abRange" tag="Personal" name="Personal" abbrev="pers"/>
    <tag group="ChooseSrc1" tag="Thing" name="All Things" abbrev="All Things"/>
    <tag group="ChooseSrc2" tag="Thing" name="All Things" abbrev="All Things"/>
    <eval phase="PostLevel" priority="10000" index="2"><![CDATA[    doneif (tagis[Helper.ShowSpec] = 0)

    doneif (tagis[Helper.Disable] <> 0)

    if (field[usrChosen1].ischosen <> 0) then
      perform field[usrChosen1].chosen.pulltags[ClsAllowSp.?]
    endif

    if (field[usrChosen2].ischosen <> 0) then
      perform field[usrChosen2].chosen.pulltags[ClsAllowSp.?]
    endif

    perform root.linkage[table].pushtags[ClsAllowSp.?]]]></eval>
    <eval phase="First" priority="500"><![CDATA[
      ~ If we're disabled, do nothing & 
      doneif (tagis[Helper.Disable] = 1)

perform hero.assign[ProfSkill.skArcana]]]></eval>
    <evalrule phase="PostLevel" priority="10000" message="Must add chosen spells to spells known!" summary="Must add chosen spells to spells known!"><![CDATA[
      validif (tagis[Helper.ShowSpec] = 0)

      validif (tagis[Helper.Disable] <> 0)

      var spellname1 as string
      var spellname2 as string
      var searchexpr as string
      var messnames as string
      var foundone as number

      @valid = 1

      if (field[usrChosen1].ischosen <> 0) then
        foundone = 0
        searchexpr = "KnowSpell." & field[usrChosen1].chosen.idstring & " & SpellType.cHelpWiz"


        foreach pick in hero from BaseSpell where searchexpr
          foundone = 1

          ~ If this copy of the ability is bootstrapped by the Arcane domain, the chosen spells should be marked as Free, because they don't count against our spells known limit.
          if (root.tagis[Ability.c5CWizTheu] <> 0) then
            perform eachpick.assign[Helper.Free]
            endif
          nexteach

        if (foundone = 0) then
          spellname1 = field[usrChosen1].chosen.field[name].text
          @valid = 0
          endif
        endif

      if (field[usrChosen2].ischosen <> 0) then
        foundone = 0
        searchexpr = "KnowSpell." & field[usrChosen2].chosen.idstring & " & SpellType.cHelpWiz"

        foreach pick in hero from BaseSpell where searchexpr
          foundone = 1

          ~ If this copy of the ability is bootstrapped by the Arcane domain, the chosen spells should be marked as Free, because they don't count against our spells known limit.
          if (root.tagis[Ability.c5CWizTheu] <> 0) then
            perform eachpick.assign[Helper.Free]
            endif
          nexteach

        if (foundone = 0) then
          spellname2 = field[usrChosen2].chosen.field[name].text
          @valid = 0
          endif
        endif

      if (@valid = 0) then
        messnames = splice(messnames, spellname1, ", ")
        messnames = splice(messnames, spellname2, ", ")
        @message = "You have selected the following spells for Arcane Initiate but not added them to your Wizard spells known: " & messnames
        endif]]></evalrule>
    </thing>
  <thing id="c5CWizTArM" name="Arcane Mastery" description="Add one wizard spell you choose for each of level 6, 7, 8 and 9 to your list of domain spells, which then count as cleric spells for you.\n\n{i}{b}Note:{/b}You&apos;ll have to manually add each spell to your spellbook{/i}" compset="ClSpecial">
    <comment><![CDATA["KnowSpell." & field[usrChosen1].chosen.idstring & " & SpellType.cHelpClr"

KnowSpell.spDisinteg & SpellType.cHelpClr]]></comment>
    <eval phase="Render" priority="21000"><![CDATA[    doneif (tagis[Helper.ShowSpec] = 0)

    doneif (tagis[Helper.Disable] <> 0)

    ~we just add +4 spells to the minimum spell number for the spellbook.
    hero.childfound[cHelpWiz].field[cSplBkMin].value += 4]]></eval>
    </thing>
  </document>
